"""Python interface to GenoLogics LIMS via its REST API.
"""
from genologics.lims import *
import sys
import getopt
import datetime
import csv 
import pprint
import urllib

def createContainer( cType, cName , lims):
	c = ""
	
	cTypes = lims.get_container_types( name=cType)
	if len(cTypes) == 1 : 
		c = lims.create_container( cTypes[0], name="")
	return c

def processRows(ROWS, allProjectIDs, lims):
	ContainersCreatedCache = {}
	header = ROWS[0].keys()

	for row in ROWS:
		sName = row[ "Submitted Sample Name" ].strip()
		projectID = row[ "ProjectID" ].strip()
		project = Project(lims, id= projectID) 

		#Only existing project allowed!
		if projectID not in allProjectIDs :
			print "WARNING: Project ID not available in LIMS: " , projectID
			sys.exit(255) 
		#Assume samples are placed in tubes 
		try: 
			cName = row[ "ContainerName" ].strip()
		except: 
			cName = ""

		sContainer = createContainer( "Tube", cName, lims )
		wp = '1:1'
		
		## let's get the udfs
		udfs = {}
		for colName in header:
			if colName.startswith( "UDF/" ) is True:
				udfName = colName.replace( "UDF/", "" )
				udfs[ udfName ] = row[ colName ]
		
		#Create the sample 
		r = Sample.create(lims, 
			      container = sContainer , 
			      position = wp , 
			      project= project , 
			      name= sName , 
			      udf=udfs )
		print r
		sys.exit(255)
						
def getROWS( CSVfile) : 
	ROWS = []
	reader = csv.DictReader(open(CSVfile, 'rb'))
	line_count = 0
	for line in reader:
		line_count +=1 
		ROWS.append(line)

	print "Number of processed lines: " , line_count
	pprint.pprint(ROWS)
				
	return ROWS

def getToday() : 
	now = datetime.datetime.now()
	
	strToday = str(now.year) + "-"
	tmp = str(now.month)
	if len(tmp) == 1:
		tmp = "0" + tmp
	strToday += ( tmp + "-" )
	tmp = str(now.day)
	if len(tmp) == 1:
		tmp = "0" + tmp
	strToday += tmp
	
	return strToday

def main():
	global args
	args = {}
	opts, extraparams = getopt.getopt(sys.argv[1:], "b:u:p:f:")
	for o,p in opts:
		if o == '-b':
			args[ "BASEURI" ] = p
		elif o == '-u':
			args[ "USERNAME" ] = p
		elif o == '-p':
			args[ "PASSWORD" ] = p
		elif o == '-f':
			args[ "CSVfile" ] = p

	BASEURI = args["BASEURI"].split('api')[0]

	lims = Lims(BASEURI, args["USERNAME"], args["PASSWORD"])
	lims.check_version()

	TODAY = getToday()
	ROWS = getROWS(args[ "CSVfile" ])
	allProjects = lims.get_projects()
	allProjectIDs = []
	for project in allProjects :
		allProjectIDs.append(project.id)

	processRows(ROWS, allProjectIDs, lims)

				
if __name__=='__main__':
	main()

